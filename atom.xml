<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yaohuiye&#39;s blog</title>
  <subtitle>念念不忘，必有回响</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-25T15:59:03.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yaohuiye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask入门Demo</title>
    <link href="http://yoursite.com/2017/10/25/python-flask-start/"/>
    <id>http://yoursite.com/2017/10/25/python-flask-start/</id>
    <published>2017-10-25T15:50:50.000Z</published>
    <updated>2017-10-25T15:59:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><blockquote>
<p>在虚拟环境中可以安装私有包，而不会影响系统中安装的全局解释器。避免包的混乱和版本的冲突。</p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li>在mac下执行命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo easy_install virtualenv</div></pre></td></tr></table></figure>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>1、 创建项目文件夹<strong>coder_home</strong></p>
<p>2、 为项目创建虚拟环境(项目中会有一个venv文件夹)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd coder_home</div><div class="line">$ virtualenv venv -p=python3.6</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>3、 激活虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source venv/bin/activate</div></pre></td></tr></table></figure>
<p>4、 安装flask环境.使用virtualevn工具创建虚拟环境时会自动安装pip</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip3 install flask</div></pre></td></tr></table></figure>
<p>5、 在项目下创建hello.py</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;)</div><div class="line">def index():</div><div class="line">    user_agent = request.headers.get(&apos;User-Agent&apos;)</div><div class="line">    return &apos;&lt;h1&gt;Hello World. Your browser is %s&lt;/h1&gt;&apos; % user_agent</div><div class="line"></div><div class="line">@app.route(&apos;/user/&lt;name&gt;&apos;)</div><div class="line">def user(name):</div><div class="line">    return &apos;&lt;h1&gt;Hello, %s&lt;/h1&gt;&apos; % name</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run(debug=True)</div></pre></td></tr></table></figure>
<p>6、 启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python hello.py</div></pre></td></tr></table></figure>
<p>7、 运行</p>
<p>输入<a href="http://localhost:5000访问" target="_blank" rel="external">http://localhost:5000访问</a></p>
<h3 id="示例项目"><a href="#示例项目" class="headerlink" title="示例项目"></a>示例项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/miguelgrinberg/flasky.git</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;虚拟环境&quot;&gt;&lt;a href=&quot;#虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;虚拟环境&quot;&gt;&lt;/a&gt;虚拟环境&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在虚拟环境中可以安装私有包，而不会影响系统中安装的全局解释器。避免包的混乱和版本的冲突。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在mac下执行命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo easy_install virtualenv&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h3&gt;&lt;p&gt;1、 创建项目文件夹&lt;strong&gt;coder_home&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2、 为项目创建虚拟环境(项目中会有一个venv文件夹)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cd coder_home&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ virtualenv venv -p=python3.6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Python语言之Re库学习</title>
    <link href="http://yoursite.com/2017/03/24/python-re/"/>
    <id>http://yoursite.com/2017/03/24/python-re/</id>
    <published>2017-03-24T04:12:03.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Re库是Python的标准库，主要用于字符串匹配</p>
<h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import Re</div></pre></td></tr></table></figure>
<h3 id="表示类型"><a href="#表示类型" class="headerlink" title="表示类型"></a>表示类型</h3><pre><code>raw string原生字符串类型：r&apos;text&apos;。当正则表达式中包含转义符时，使用raw string
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r&apos;[1-9]\d&#123;5&#125;&apos;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="函数式用法：一次性操作"><a href="#函数式用法：一次性操作" class="headerlink" title="函数式用法：一次性操作"></a>函数式用法：一次性操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">match = re.search(r&apos;[1-d]\d&#123;5&#125;&apos;,&apos;Hello 2345678&apos;)</div></pre></td></tr></table></figure>
<h4 id="面向对象用法：编译后的多次操作"><a href="#面向对象用法：编译后的多次操作" class="headerlink" title="面向对象用法：编译后的多次操作"></a>面向对象用法：编译后的多次操作</h4><ul>
<li>将正则表达式的字符串形式编译成正则表达式对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">regex = re.compile(pattern,flags=0)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">regex = re.compile(r&apos;[1-d]\d&#123;5&#125;&apos;)</div><div class="line">match = regex.search(&apos;Hello 2345678&apos;)</div></pre></td></tr></table></figure>
<h3 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h3><ul>
<li><p>re.search(pattern,string,flags=0)<br>  在字符串中搜索匹配正则的第一个位置，返回match对象</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">match = re.search(r&apos;[1-d]\d&#123;5&#125;&apos;,&apos;Hello 2345678&apos;)</div><div class="line">if match:</div><div class="line">	print(match.group(0))</div></pre></td></tr></table></figure>
</li>
<li><p>re.match(pattern,string,flags=0)<br>  从字符串的开始位置起匹配正则表达式，返回match对象</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">match = re.match(r&apos;[1-9]\d&#123;5&#125;&apos;,&apos;100081&apos;)</div><div class="line">if match:</div><div class="line">	print(match.group(0))</div></pre></td></tr></table></figure>
</li>
<li><p>re.findall(pattern,string,flags=0)<br>  以列表类型返回全部能匹配的子串</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls = re.findall(r&apos;[1-9]\d&#123;5&#125;&apos;,&apos;100081 100065&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>re.split(pattern,string,maxsplit=0,flags=0)<br>  将字符串按照正则匹配结果进行分割，返回列表类型</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls = re.split(r&apos;[1-9]\d&#123;5&#125;&apos;,&apos;Hello100081 sd100065 sd&apos;,maxsplit=2)</div></pre></td></tr></table></figure>
</li>
<li><p>re.finditer(pattern,string,flags=0)<br>  搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for m in re.finditer(r&apos;[1-9]\d&#123;5&#125;&apos;,&apos;Hello100081 sd100065 sd&apos;):</div><div class="line">	if m:</div><div class="line">		print(m.group(0))</div></pre></td></tr></table></figure>
</li>
<li><p>re.sub(pattern,repl,string,count=0,flags=0)<br>  在一个字符串中替换所有匹配正则的子串，返回替换后的字符串</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">re.sub(r&apos;[1-9]\d&#123;5&#125;&apos;,&apos;:zipcode&apos;,&apos;Hello100081 sd100065 sd&apos;,count=1)</div></pre></td></tr></table></figure>
</li>
<li><p>参数说明</p>
<ul>
<li>pattern：正则表达式</li>
<li>string：待匹配的字符串</li>
<li>repl：替换匹配字符串的字符串</li>
<li>count：匹配的最大替换次数</li>
<li>maxsplit：最大分割数，剩余部分作为最后一个元素输出</li>
<li>flags：正则表达式使用时的控制标记<ul>
<li>re.I(re.IGNORECASE)：忽略大小写</li>
<li>re.M(re.MULTILINE)：正则中的^操作符能够将给定字符串的每行作为匹配的开始</li>
<li>re.S(re.DOTALL)：正则中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="match对象"><a href="#match对象" class="headerlink" title="match对象"></a>match对象</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li>.string：待匹配的文本</li>
<li>.re：匹配时使用的正则</li>
<li>.pos：正则搜索文本的开始位置</li>
<li>.endpos：正则搜索文本的结束位置</li>
</ul>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li>.group(0)：获取匹配后的字符串</li>
<li>.start()：匹配字符串在原始字符串的开始位置</li>
<li>.end()：匹配字符串在原始字符串的结束位置</li>
<li>.span()：返回(开始位置,结束位置)</li>
</ul>
<h4 id="贪婪匹配和最小匹配"><a href="#贪婪匹配和最小匹配" class="headerlink" title="贪婪匹配和最小匹配"></a>贪婪匹配和最小匹配</h4><ul>
<li><p>Re库默认采用贪婪匹配，即输出匹配最长的子串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">match = re.search(r&apos;PY.*N&apos;,&apos;PYANBNCNDN&apos;)</div><div class="line">match.group(0)</div></pre></td></tr></table></figure>
<p>结果：’PYANBNCNDN’</p>
</li>
<li><p>最小匹配，即输出匹配最短的子串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">match = re.search(r&apos;PY.*?N&apos;,&apos;PYANBNCNDN&apos;)</div><div class="line">match.group(0)</div></pre></td></tr></table></figure>
<p>结果：’PYAN’</p>
</li>
</ul>
<h4 id="最小匹配操作符"><a href="#最小匹配操作符" class="headerlink" title="最小匹配操作符"></a>最小匹配操作符</h4><ul>
<li>*?：前一个字符0次或无限次扩展，最小匹配</li>
<li>+?：前一个字符1次或无限次扩展，最小匹配</li>
<li>??：前一个字符0次或1次扩展，最小匹配</li>
<li>{m,n}?：扩展前一个字符m至n次(含n)，最小匹配</li>
</ul>
<h3 id="学习参考"><a href="#学习参考" class="headerlink" title="学习参考"></a>学习参考</h3><p>学习参考于中国大学imooc课程：嵩天老师的《Python网络爬虫与信息提取》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;Re库是Python的标准库，主要用于字符串匹配&lt;/p&gt;
&lt;h3 id=&quot;导入模块&quot;&gt;&lt;a href=&quot;#导入模块&quot; class=&quot;headerlink&quot; title=&quot;导入模块&quot;&gt;&lt;/a&gt;导入模块&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import Re&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;表示类型&quot;&gt;&lt;a href=&quot;#表示类型&quot; class=&quot;headerlink&quot; title=&quot;表示类型&quot;&gt;&lt;/a&gt;表示类型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;raw string原生字符串类型：r&amp;apos;text&amp;apos;。当正则表达式中包含转义符时，使用raw string
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;r&amp;apos;[1-9]\d&amp;#123;5&amp;#125;&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="re" scheme="http://yoursite.com/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>常用的正则表达式</title>
    <link href="http://yoursite.com/2017/03/23/learn-regex/"/>
    <id>http://yoursite.com/2017/03/23/learn-regex/</id>
    <published>2017-03-23T03:16:26.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式常用字符"><a href="#正则表达式常用字符" class="headerlink" title="正则表达式常用字符"></a>正则表达式常用字符</h3><table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">任何单个字符</td>
<td style="text-align:left">.*，表示匹配任意字符</td>
</tr>
<tr>
<td style="text-align:left">[^]</td>
<td style="text-align:left">非字符集，对单个字符给出排除范围</td>
<td style="text-align:left">[^abc]，表示非a或b或c的单个字符</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">前一个字符的0次或多次</td>
<td style="text-align:left">abc*，表示ab、abc、abcc、abccc等</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">前一个字符的1次或多次</td>
<td style="text-align:left">abc+，表示abc、abcc、abccc等</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">前一个字符的0次或1次</td>
<td style="text-align:left">abc?，表示ab、abc</td>
</tr>
<tr>
<td style="text-align:left">&#124;</td>
<td style="text-align:left">或，左右表达式任意一个</td>
<td style="text-align:left">abc&#124;edf，表示abc或edf</td>
</tr>
<tr>
<td style="text-align:left">{m}</td>
<td style="text-align:left">前一个字符m次</td>
<td style="text-align:left">ab{2}c，表示abbc</td>
</tr>
<tr>
<td style="text-align:left">{m,n}</td>
<td style="text-align:left">前一个字符m至n次</td>
<td style="text-align:left">ab{1,2}c，表示abc、abbc</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">匹配字符串开头</td>
<td style="text-align:left">^abc，表示abc且在一个字符串的开头</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">匹配字符串结尾</td>
<td style="text-align:left">abc%，表示abc且在一个字符串的结尾</td>
</tr>
<tr>
<td style="text-align:left">()</td>
<td style="text-align:left">分组标记，内部只能使用&#124;操作符</td>
<td style="text-align:left">(abc)表示abc，(abc&#124;def)表示abc、def</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:left">数字，等价于[0-9]</td>
<td style="text-align:left">.*，表示匹配任意字符</td>
</tr>
<tr>
<td style="text-align:left">\w</td>
<td style="text-align:left">单词字符，等价于[A-Za-z0-9]</td>
<td style="text-align:left">.*，表示匹配任意字符</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><h4 id="整数形式的字符串"><a href="#整数形式的字符串" class="headerlink" title="整数形式的字符串"></a>整数形式的字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^-?\d+$</div></pre></td></tr></table></figure>
<h4 id="正整数形式的字符串"><a href="#正整数形式的字符串" class="headerlink" title="正整数形式的字符串"></a>正整数形式的字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[0-9]*[0-9]*$</div></pre></td></tr></table></figure>
<h4 id="英文字符组成的字符串"><a href="#英文字符组成的字符串" class="headerlink" title="英文字符组成的字符串"></a>英文字符组成的字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[A-Za-z]+$</div></pre></td></tr></table></figure>
<h4 id="26个字母的字母和数字组成的字符串"><a href="#26个字母的字母和数字组成的字符串" class="headerlink" title="26个字母的字母和数字组成的字符串"></a>26个字母的字母和数字组成的字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[A-Za-z0-9]+$</div></pre></td></tr></table></figure>
<h4 id="中国境内邮政编码6位"><a href="#中国境内邮政编码6位" class="headerlink" title="中国境内邮政编码6位"></a>中国境内邮政编码6位</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[1-9]\d&#123;5&#125;</div></pre></td></tr></table></figure>
<h4 id="中文字符"><a href="#中文字符" class="headerlink" title="中文字符"></a>中文字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[\u4e00-\u9fa5]</div></pre></td></tr></table></figure>
<h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(([1-9]?\d|1\d&#123;2&#125;|2[0-4]\d|25[0-5]).)&#123;3&#125;([1-9]?\d|1\d&#123;2&#125;|2[0-4]\d|25[0-5])&#123;1&#125;$</div></pre></td></tr></table></figure>
<h3 id="学习参考"><a href="#学习参考" class="headerlink" title="学习参考"></a>学习参考</h3><p>学习参考于中国大学imooc课程：嵩天老师的《Python网络爬虫与信息提取》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则表达式常用字符&quot;&gt;&lt;a href=&quot;#正则表达式常用字符&quot; class=&quot;headerlink&quot; title=&quot;正则表达式常用字符&quot;&gt;&lt;/a&gt;正则表达式常用字符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;操作符&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;任何单个字符&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;.*，表示匹配任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[^]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;非字符集，对单个字符给出排除范围&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[^abc]，表示非a或b或c的单个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;*&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;前一个字符的0次或多次&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;abc*，表示ab、abc、abcc、abccc等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;前一个字符的1次或多次&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;abc+，表示abc、abcc、abccc等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;?&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;前一个字符的0次或1次&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;abc?，表示ab、abc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;#124;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;或，左右表达式任意一个&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;abc&amp;#124;edf，表示abc或edf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;{m}&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;前一个字符m次&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ab{2}c，表示abbc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;{m,n}&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;前一个字符m至n次&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ab{1,2}c，表示abc、abbc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配字符串开头&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;^abc，表示abc且在一个字符串的开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配字符串结尾&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;abc%，表示abc且在一个字符串的结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;()&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;分组标记，内部只能使用&amp;#124;操作符&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;(abc)表示abc，(abc&amp;#124;def)表示abc、def&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;数字，等价于[0-9]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;.*，表示匹配任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;\w&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;单词字符，等价于[A-Za-z0-9]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;.*，表示匹配任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
      <category term="regex" scheme="http://yoursite.com/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>JSTL表达式把一个拼接的字符串进行分隔输出</title>
    <link href="http://yoursite.com/2017/03/22/jstl-split-string/"/>
    <id>http://yoursite.com/2017/03/22/jstl-split-string/</id>
    <published>2017-03-22T13:28:56.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>在JSTL表达式中，<strong><em><c:fortokens></c:fortokens></em></strong>标签可以根据某个分隔符分隔指定字符串，相当于java.util.StringTokenizer类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:forTokens items=&quot;$&#123;tags&#125;&quot; delims=&quot;,&quot; var=&quot;tag&quot;&gt;</div><div class="line">	&lt;li&gt;$&#123;tag&#125;&lt;/li&gt;</div><div class="line">&lt;/c:forTokens&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在JSTL表达式中，&lt;strong&gt;&lt;em&gt;&lt;c:fortokens&gt;&lt;/c:fortokens&gt;&lt;/em&gt;&lt;/strong&gt;标签可以根据某个分隔符分隔指定字符串，相当于java.util.StringTokenizer类。&lt;br&gt;&lt;figure class=&quot;highli
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="jstl" scheme="http://yoursite.com/tags/jstl/"/>
    
      <category term="forTokens" scheme="http://yoursite.com/tags/forTokens/"/>
    
  </entry>
  
  <entry>
    <title>基础排序的Python语言代码实现</title>
    <link href="http://yoursite.com/2017/03/05/python-sort-algorithm/"/>
    <id>http://yoursite.com/2017/03/05/python-sort-algorithm/</id>
    <published>2017-03-05T05:29:27.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">def sort_min2max(array, n):</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    排序函数：从小到大排序</div><div class="line">    :param array:要进行排序的数组</div><div class="line">    :param n: 要进行排序的数组的个数</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    for i in range(n):</div><div class="line">        index = i</div><div class="line">        for j in range(i + 1,n):</div><div class="line">            if(array[j] &lt; array[index]):</div><div class="line">                index = j</div><div class="line"></div><div class="line">        if index != i:</div><div class="line">            array[i],array[index] = array[index],array[i]</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">def sort_min2max(array,n):</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    插入排序：从小到大排序，优化后版本</div><div class="line">    :param array 要排序的数组</div><div class="line">    :param n 要排序的数组个数</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    for i in range(1,n):</div><div class="line">        #寻找array[i]的合适插入位置</div><div class="line">        now = array[i]</div><div class="line">        index = 0</div><div class="line"></div><div class="line">        for j in range(i,-1,-1):</div><div class="line">            index = j</div><div class="line"></div><div class="line">            if array[j - 1] &gt; now:</div><div class="line">                array[j] = array[j - 1]</div><div class="line">            else:</div><div class="line">                break</div><div class="line"></div><div class="line">        array[index] = now</div></pre></td></tr></table></figure>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">希尔排序：从小到大排列</div><div class="line">:param array:要排序的数组</div><div class="line">:param n: 要排序的数组的个数</div><div class="line">:return:</div><div class="line">&apos;&apos;&apos;</div><div class="line">h = 1</div><div class="line">while h &lt; n//3:</div><div class="line">    h = 3 * h + 1</div><div class="line"></div><div class="line">while h &gt;= 1:</div><div class="line">    for i in range(h,n):</div><div class="line">        now = array[i]</div><div class="line">        j = i</div><div class="line">        while j &gt;= h and now &lt; array[j-h]:</div><div class="line">            array[j]=array[j-h]</div><div class="line">            j -= h</div><div class="line">        array[j] = now</div><div class="line"></div><div class="line">    h /= 3</div></pre></td></tr></table></figure>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">def sort_min2max(array, n):</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    冒泡排序：从小到大排序</div><div class="line">    :param array:要排序的数组</div><div class="line">    :param n: 要排序的数组的个数</div><div class="line">    :return:</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    swapped = True</div><div class="line"></div><div class="line">    while swapped:</div><div class="line">        swapped = False</div><div class="line">        for i in range(1,n):</div><div class="line">            if array[i - 1] &gt; array[i]:</div><div class="line">                array[i -1],array[i] = array[i],array[i - 1]</div><div class="line">                swapped = True</div><div class="line">        #已经将最大的值放到了最后面，则可减少最末值的判断</div><div class="line">        n -= 1</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;def sort_min2max(array, n):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;&amp;apos;&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    排序函数：从小到大排序&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    :param array:要进行排序的数组&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    :param n: 要进行排序的数组的个数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;&amp;apos;&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for i in range(n):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        index = i&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for j in range(i + 1,n):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if(array[j] &amp;lt; array[index]):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                index = j&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if index != i:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            array[i],array[index] = array[index],array[i]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="sort" scheme="http://yoursite.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>Python语言之request库学习</title>
    <link href="http://yoursite.com/2017/03/02/python-requests-learn/"/>
    <id>http://yoursite.com/2017/03/02/python-requests-learn/</id>
    <published>2017-03-02T10:20:43.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><strong>request</strong>库是python中一个通过HTTP协议请求去爬取网页信息的第三方库，通过GET、POST等类型向目标域发送request请求，返回响应结果Response，通过对响应结果的解析，即可得到我们想要的信息</p>
<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul>
<li>HTTP：超文本传输协议</li>
</ul>
<ol>
<li>一个基于请求与响应模式的、无状态的应用层协议</li>
<li>无状态：第一次和第二次请求没有关联</li>
<li>HTTP协议采用URL作为定位网络资源的标识</li>
</ol>
<h3 id="API说明"><a href="#API说明" class="headerlink" title="API说明"></a>API说明</h3><ul>
<li>基础API：requests.request(method,url,**kwargs)</li>
<li>示例说明<br>eg: requests.get(url,params=None,**kwargs)</li>
</ul>
<ol>
<li>url：是访问的网站地址</li>
<li>params: 是附加的参数</li>
<li>kwargs：控制访问的参数，在GET请求中有12个</li>
</ol>
<a id="more"></a>
<ul>
<li>requests的七个主要的API</li>
</ul>
<ol>
<li>构造一个请求，其他六个API的基础方法：requests.request()</li>
<li>GET请求：requests.get()</li>
<li>POST请求：requests.post()</li>
<li>获取头信息：requests.head()</li>
<li>put请求：requests.put()</li>
<li>提交局部修改的请求：requests.patch()</li>
<li>删除请求：requests.delete()</li>
</ol>
<ul>
<li>请求返回的对象Response对象的属性</li>
</ul>
<ol>
<li>状态码：r.status_code</li>
<li>响应内容：r.text</li>
<li>从Http header中猜测出的的编码方式：r.encoding。如果 header中不存在charset，则认为编码为ISO-8859-1</li>
<li>从内容中分析出的响应内容编码方式：r.apparent_encoding</li>
<li>响应内容的二进制形式：r.content</li>
</ol>
<ul>
<li>Requests库的异常</li>
</ul>
<ol>
<li>网络连接错误异常，如DNS查询失败、拒绝连接：requests.ConnectionError</li>
<li>HTTP错误异常：requests.HTTPError</li>
<li>URL缺失异常：requests.URIRequired</li>
<li>超过最大重定向次数：requests.TooManyRedirects</li>
<li>连接远程服务器超时：requests.ConnectTimeout</li>
<li>请求URL超时：requests.Timeout</li>
</ol>
<ul>
<li>控制参数**kwargs</li>
</ul>
<ol>
<li>params:参数</li>
<li>json:JSON格式的数据</li>
<li>data：POST参数</li>
<li>headers:HTTP的头字段</li>
<li>cookies</li>
<li>auth：认证参数</li>
<li>files:字典类型，传输文件</li>
<li>timeout:超时时间</li>
<li>proxies:设置代理服务器</li>
<li>allow_redirects:True/False，是否允许重定向</li>
<li>stream：True/False，获取内容是否立即下载</li>
<li>verify：SSL相关参数</li>
<li>cert:本地SSL证书路径</li>
</ol>
<ul>
<li>常用的抛出异常方法</li>
</ul>
<ol>
<li>r.raise_for_status()：如果不是200，产生异常requests.HTTPError</li>
</ol>
<h3 id="安装requests库"><a href="#安装requests库" class="headerlink" title="安装requests库"></a>安装requests库</h3><p>系统已安装python以及pip插件，打开控制台，输入如下命令进行安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install requests</div></pre></td></tr></table></figure>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><ol>
<li><p>导入包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import requests</div></pre></td></tr></table></figure>
</li>
<li><p>发送get请求，访问百度首页</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = requests.get(&apos;http://www.baidu.com&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>获取状态码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r.status_code</div></pre></td></tr></table></figure>
</li>
<li><p>设置编码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r.encoding = &apos;utf-8&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>获取响应内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r.text</div></pre></td></tr></table></figure>
</li>
<li><p>判断返回的对象类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type(r) #requests.models.Response</div></pre></td></tr></table></figure>
</li>
<li><p>获取响应的头部信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r.headers</div></pre></td></tr></table></figure>
</li>
<li><p>带参数的GET请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">params = &#123;&apos;username&apos;:&apos;yaohuiye&apos;,&apos;password&apos;:&apos;123abc&apos;&#125;</div><div class="line">r = requests.request(&apos;GET&apos;,&apos;http://yaohuiye.com/blog&apos;,params = params)</div><div class="line">print(r.url) #打印链接</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import requests</div><div class="line">import time</div><div class="line"></div><div class="line">def getHTMLText(url):</div><div class="line">    try:</div><div class="line">        r = requests.get(url, timeout=30)</div><div class="line">        r.raise_for_status() #如果状态码不是200，则引发HTTPError异常</div><div class="line">        r.encoding = r.apparent_encoding</div><div class="line">        return r.text</div><div class="line">    except:</div><div class="line">        return &apos;产生异常&apos;</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    url = &apos;http://www.baidu.com&apos;</div><div class="line">    startTime = time.clock()</div><div class="line">    </div><div class="line">    for i in range(100):</div><div class="line">        getHTMLText(url)</div><div class="line">    endTime = time.clock()</div><div class="line">    print(&apos;消耗了%d秒&apos;%(endTime - startTime))</div></pre></td></tr></table></figure>
<h3 id="爬取图片并存储"><a href="#爬取图片并存储" class="headerlink" title="爬取图片并存储"></a>爬取图片并存储</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">import requests</div><div class="line"></div><div class="line">def fetch(url,imageDir):</div><div class="line">    try:</div><div class="line">        if not os.path.exists(imageDir):</div><div class="line">            os.mkdir(imageDir)</div><div class="line"></div><div class="line">        imagePath = imageDir + &apos;/&apos; + url.split(&apos;/&apos;)[-1]</div><div class="line"></div><div class="line">        if not os.path.exists(imagePath):</div><div class="line">            r = requests.get(url)</div><div class="line">            r.raise_for_status()</div><div class="line">            with open(imagePath,&apos;wb&apos;) as f:</div><div class="line">                f.write(r.content)</div><div class="line">                f.close()</div><div class="line">                print(&apos;save success&apos;)</div><div class="line"></div><div class="line">        else:</div><div class="line">            print(&apos;file exists&apos;)</div><div class="line">    except:</div><div class="line">        print(&apos;fetch fail&apos;)</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    url = &apos;http://img.1985t.com/uploads/attaches/2016/01/60320-bbZEcch.jpg&apos;</div><div class="line">    imageDir = &apos;F://images&apos;</div><div class="line">    fetch(url,imageDir)</div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>尽管Requests库功能很友好、开发简单（其实除了import外只需一行主要代码），但其性能与专业爬虫相比还是有一定差距的。</p>
<h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><p>当一些请求响应的内容比较大时，可以通过header请求先去获取到header中的信息，然后判断一些相关信息后，再采取措施去请求数据</p>
<h3 id="学习参考"><a href="#学习参考" class="headerlink" title="学习参考"></a>学习参考</h3><p>学习参考于中国大学imooc课程：嵩天老师的《Python网络爬虫与信息提取》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;request&lt;/strong&gt;库是python中一个通过HTTP协议请求去爬取网页信息的第三方库，通过GET、POST等类型向目标域发送request请求，返回响应结果Response，通过对响应结果的解析，即可得到我们想要的信息&lt;/p&gt;
&lt;h3 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术语&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTTP：超文本传输协议&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;一个基于请求与响应模式的、无状态的应用层协议&lt;/li&gt;
&lt;li&gt;无状态：第一次和第二次请求没有关联&lt;/li&gt;
&lt;li&gt;HTTP协议采用URL作为定位网络资源的标识&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;API说明&quot;&gt;&lt;a href=&quot;#API说明&quot; class=&quot;headerlink&quot; title=&quot;API说明&quot;&gt;&lt;/a&gt;API说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基础API：requests.request(method,url,**kwargs)&lt;/li&gt;
&lt;li&gt;示例说明&lt;br&gt;eg: requests.get(url,params=None,**kwargs)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;url：是访问的网站地址&lt;/li&gt;
&lt;li&gt;params: 是附加的参数&lt;/li&gt;
&lt;li&gt;kwargs：控制访问的参数，在GET请求中有12个&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="requests" scheme="http://yoursite.com/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>FastJSON的时间格式化</title>
    <link href="http://yoursite.com/2017/02/19/fastjson-time-format/"/>
    <id>http://yoursite.com/2017/02/19/fastjson-time-format/</id>
    <published>2017-02-19T04:21:32.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在项目中某模块的列表展示时发表时间有格式的限制，格式需为<strong>“yyyy-MM-dd HH:mm:ss”</strong>。<br>模块的列表数据是采用了FastJSON这个JSON组件直接进行数据解析。如果没有相应的处理，导致了解析出来的时间格式为<strong>“yyyy-MM-dd HH:mm:ss.0”</strong>，多了一个”.0”的字符</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>通过FastJSON的注解来解决，通过@JSONField注解的属性format来进行指定，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class Article&#123;</div><div class="line">	@JSONField(format=&quot;yyyy-MM-dd HH:mm:ss&quot;)</div><div class="line">	private Timestamp time;</div><div class="line">	...//省略其他属性</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在项目中某模块的列表展示时发表时间有格式的限制，格式需为&lt;strong&gt;“yyyy-MM-dd HH:mm:ss”&lt;/strong&gt;。&lt;br
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="FastJSON" scheme="http://yoursite.com/tags/FastJSON/"/>
    
      <category term="JSONField" scheme="http://yoursite.com/tags/JSONField/"/>
    
  </entry>
  
  <entry>
    <title>编写模糊查询的SQL语句</title>
    <link href="http://yoursite.com/2017/02/19/sql-like-create/"/>
    <id>http://yoursite.com/2017/02/19/sql-like-create/</id>
    <published>2017-02-19T03:35:04.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>之前项目在使用到LIKE查询时，使用的方式如下：<br>1、编写SQL语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sql = SELECT * FROM Dictionary WHERE name LIKE ?</div></pre></td></tr></table></figure></p>
<p>2、在程序中对查询的关键字添加上左右的<em>%</em>通配符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name = &quot;%&quot; + name + &quot;%&quot;</div></pre></td></tr></table></figure></p>
<p>3、执行查询语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dao.query(sql,tagName)</div></pre></td></tr></table></figure></p>
<p>之所以将通配符放到Java程序中进行拼接，是因为如果将<em>%</em>放到sql语句中，sql语句执行会报错，类似如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sql = SELECT * FROM Dictionary WHERE name LIKE %?%</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>这就使得在程序中嵌入了sql语句的关键字，JAVA代码与SQL代码没有严格区分。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1、编写SQL语句，即在占位符的左右加上%，其中%号用单引号包裹起来，然后空一格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sql = SELECT * FROM Dictionary WHERE name LIKE &apos;%&apos; ? &apos;%&apos;</div></pre></td></tr></table></figure></p>
<p>2、执行查询语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dao.query(sql,tagName)</div></pre></td></tr></table></figure></p>
<p>如此便可正确的执行sql语句，从而将sql代码与JAVA代码分离 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;之前项目在使用到LIKE查询时，使用的方式如下：&lt;br&gt;1、编写SQL语句&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sql = SELECT * FROM Dictionary WHERE name LIKE ?&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、在程序中对查询的关键字添加上左右的&lt;em&gt;%&lt;/em&gt;通配符&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;name = &amp;quot;%&amp;quot; + name + &amp;quot;%&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3、执行查询语句&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dao.query(sql,tagName)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之所以将通配符放到Java程序中进行拼接，是因为如果将&lt;em&gt;%&lt;/em&gt;放到sql语句中，sql语句执行会报错，类似如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sql = SELECT * FROM Dictionary WHERE name LIKE %?%&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="sql" scheme="http://yoursite.com/categories/sql/"/>
    
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
      <category term="like" scheme="http://yoursite.com/tags/like/"/>
    
  </entry>
  
  <entry>
    <title>SVN安装记录</title>
    <link href="http://yoursite.com/2017/02/15/svn-install/"/>
    <id>http://yoursite.com/2017/02/15/svn-install/</id>
    <published>2017-02-15T15:20:52.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SVN安装地址"><a href="#SVN安装地址" class="headerlink" title="SVN安装地址"></a>SVN安装地址</h3><ul>
<li>VisualSVN：<a href="http://subversion.apache.org/packages.html" target="_blank" rel="external">http://subversion.apache.org/packages.html</a></li>
<li>TortoiseSVN：<a href="http://tortoisesvn.net/downloads.html" target="_blank" rel="external">http://tortoisesvn.net/downloads.html</a></li>
</ul>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p><code>一路选择安装路径，Next...</code></p>
<ol>
<li><p>在服务器中安装Visual SVN作为SVN的服务端，安装完成后，打开Visual SVN图形界面，可方便的进行版本库添加、用户创建。</p>
</li>
<li><p>在服务器中安装TortoiseSVN，用于版本库的签出、签入、更新、提交操作。</p>
</li>
<li><p>在客户端中安装TortoiseSVN，用于版本库的签出、签入、更新、提交操作。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SVN安装地址&quot;&gt;&lt;a href=&quot;#SVN安装地址&quot; class=&quot;headerlink&quot; title=&quot;SVN安装地址&quot;&gt;&lt;/a&gt;SVN安装地址&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;VisualSVN：&lt;a href=&quot;http://subversion.apache.
    
    </summary>
    
      <category term="tool" scheme="http://yoursite.com/categories/tool/"/>
    
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记-enum</title>
    <link href="http://yoursite.com/2017/02/15/java-enum/"/>
    <id>http://yoursite.com/2017/02/15/java-enum/</id>
    <published>2017-02-15T15:17:32.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>一、java枚举知识点：</p>
<ul>
<li>它不能有public的构造函数，这样做可以保证客户代码没有办法新建一个enum的实例。   </li>
<li>所有枚举值都是public,static,final的。  </li>
<li>Enum默认实现了java.lang.Comparable接口。   </li>
<li>Enum覆盖了了toString方法，因此我们如果调用Color.Blue.toString()默认返回字符串”Blue”.   </li>
<li>Enum提供了一个valueOf方法，这个方法和toString方法是相对应的。调用valueOf(“Blue”)将返回Color.Blue.</li>
<li>Enum还提供了values方法，这个方法使你能够方便的遍历所有的枚举值。   </li>
<li>Enum还有一个oridinal的方法，这个方法返回枚举值在枚举类种的顺序，这个顺序根据枚举值声明的顺序而定</li>
</ul>
<a id="more"></a>
<p>二、JAVA根据枚举的顺序索引，去查询获取对应的枚举：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 根据索引获取</div><div class="line"> * @param &lt;T&gt;</div><div class="line"> * @param clazz</div><div class="line"> * @param ordinal</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static &lt;T extends Enum&lt;T&gt;&gt; T valueOf(Class&lt;T&gt; clazz, int ordinal) &#123;</div><div class="line">    return (T)clazz.getEnumConstants()[ordinal];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>三、JAVA根据枚举的name，去查询获取对应的枚举：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 根据name获取</div><div class="line"> * @param &lt;T&gt;</div><div class="line"> * @param enumType</div><div class="line"> * @param name</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static &lt;T extends Enum&lt;T&gt;&gt; T valueOf(Class&lt;T&gt; enumType, String name) &#123;</div><div class="line">    return (T)Enum.valueOf(enumType, name);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、java枚举知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它不能有public的构造函数，这样做可以保证客户代码没有办法新建一个enum的实例。   &lt;/li&gt;
&lt;li&gt;所有枚举值都是public,static,final的。  &lt;/li&gt;
&lt;li&gt;Enum默认实现了java.lang.Comparable接口。   &lt;/li&gt;
&lt;li&gt;Enum覆盖了了toString方法，因此我们如果调用Color.Blue.toString()默认返回字符串”Blue”.   &lt;/li&gt;
&lt;li&gt;Enum提供了一个valueOf方法，这个方法和toString方法是相对应的。调用valueOf(“Blue”)将返回Color.Blue.&lt;/li&gt;
&lt;li&gt;Enum还提供了values方法，这个方法使你能够方便的遍历所有的枚举值。   &lt;/li&gt;
&lt;li&gt;Enum还有一个oridinal的方法，这个方法返回枚举值在枚举类种的顺序，这个顺序根据枚举值声明的顺序而定&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="enum" scheme="http://yoursite.com/tags/enum/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建笔记</title>
    <link href="http://yoursite.com/2017/02/12/hexo-note/"/>
    <id>http://yoursite.com/2017/02/12/hexo-note/</id>
    <published>2017-02-12T12:15:52.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo是一款优秀的静态博客，本文主要记录了在搭建Hexo博客时的一些安装配置。通过Hexo配置了自己的个人博客，采用了Next主题。<br>访问域名：<a href="http://yaohuiye.com" target="_blank" rel="external">http://yaohuiye.com</a><br>github源码：<a href="https://github.com/yaohuiye/yaohuiye.github.io" target="_blank" rel="external">https://github.com/yaohuiye/yaohuiye.github.io</a></p>
<a id="more"></a>
<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ol>
<li><p>安装NodeJs</p>
</li>
<li><p>为防止网络问题导致下载卡顿.NoteJs配置为使用淘宝镜像，输入如下的命令：<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
</li>
<li><p>通过如下的命令安装hexo：<br> <code>cnpm install -g hexo-cli</code><br> <code>cnpm install hexo --save</code>    </p>
</li>
<li><p>验证hexo版本，此刻安装的最新版本是3.2.2<br><code>hexo -v</code></p>
</li>
<li><p>安装Git，并在Github上拥有一个账号。因为项目是部署在Github中，利用到了其提供的Pages功能</p>
</li>
</ol>
<h3 id="Hexo指令熟悉"><a href="#Hexo指令熟悉" class="headerlink" title="Hexo指令熟悉"></a>Hexo指令熟悉</h3><ul>
<li>清理生成文件<br><code>hexo clean</code></li>
<li>新建文章<br><code>hexo new &quot;postName&quot; == hexo n &quot;postName&quot;</code></li>
<li>新建页面<br><code>hexo new page &quot;pageName&quot;</code></li>
<li>生成静态页面至public目录<br><code>hexo generate == hexo g</code></li>
<li>开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br><code>hexo server == hexo s</code></li>
<li>将.deploy目录部署到GitHub<br><code>hexo deploy == hexo d</code><br>备注：命令可以联结使用，如：<code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code>。如<code>hexo s -g</code></li>
</ul>
<h3 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h3><ol>
<li>创建一个博客目录blog</li>
<li>在blog文件夹中进入git的控制台</li>
<li>进行Hexo博客的初始化<br><code>hexo init</code><br><code>cnpm install</code></li>
<li>运行博客<br><code>hexo s -g</code></li>
<li>在浏览器中输入：<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> ,则会展示博客内容</li>
</ol>
<h3 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h3><p>  主要的配置文件是blog目录下的_config.yml。在这个配置文件中可以修改博客的标题title,简介description,语言lang,主题theme</p>
<ol>
<li>博客采用了NexT主题，安装步骤如下：<br>（1）进入blog目录下，打开git的控制台，输入如下的命令：<br>  <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code><br>（2）在blog根目录下的_config.yml中修改theme的值，修改为next<br>（3）重新运行博客，在浏览器中即可看到效果<br>备注：next提供了非常完整的帮助文档，具体可参考虑链接：<br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></li>
<li>设置站点的图标favicon.ico<br>（1）制作一个favicon.ico文件，将其放到blog/source目录下</li>
<li>设置404页面<br>（1）这里主要引用的是腾讯的公益找人404.html<br>（2）参考链接：<a href="http://theme-next.iissnan.com/theme-settings.html#volunteer-404" target="_blank" rel="external">http://theme-next.iissnan.com/theme-settings.html#volunteer-404</a></li>
<li><p>设置分类页面categories<br>（1）运行命令：<code>hexo new page categories</code><br>（2）此时在source目录下会生成categories文件夹，categories文件夹中会有一个index.md<br>（3）打开index.md，完善如下的内容。type: “categories”一定要添加，不然页面上不会生成tag列表。如果有评论功能，则添加上comments: false来禁止。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> ---</div><div class="line">title: 分类</div><div class="line">date: 2017-02-12 15:25:57,</div><div class="line">type: &quot;categories&quot;</div><div class="line">comments: false</div><div class="line"> ---</div></pre></td></tr></table></figure>
</li>
<li><p>设置标签页面tags<br>（1）运行命令：<code>hexo new page tags</code><br>（2）此时在source目录下会生成tags文件夹，tags文件夹中会有一个index.md<br>（3）打开index.md，完善如下的内容。type: “tags”一定要添加，不然页面上不会生成tag列表。如果有评论功能，则添加上comments: false来禁止。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> ---</div><div class="line">title: 标签</div><div class="line">date: 2017-02-12 15:25:57,</div><div class="line">type: &quot;tags&quot;</div><div class="line">comments: false</div><div class="line"> ---</div></pre></td></tr></table></figure>
</li>
<li><p>设置评论<br>（1）这里设置的是多说的评论<br>（2）参考链接：<a href="http://theme-next.iissnan.com/third-party-services.html#duoshuo" target="_blank" rel="external">http://theme-next.iissnan.com/third-party-services.html#duoshuo</a></p>
</li>
<li>设置分享<br>（1）这里设置的是JiaThis<br>（2）参考链接：<a href="http://theme-next.iissnan.com/third-party-services.html#share-jiathis" target="_blank" rel="external">http://theme-next.iissnan.com/third-party-services.html#share-jiathis</a></li>
<li>设置站内搜索<br>（1）这里设置的是Local Search。需要安装hexo-generator-searchdb插件<br>（2）参考链接：<a href="http://theme-next.iissnan.com/third-party-services.html#local-search" target="_blank" rel="external">http://theme-next.iissnan.com/third-party-services.html#local-search</a></li>
<li><p>设置about页面<br>（1）运行命令：<code>hexo new page about</code><br>（2）此时在source目录下会生成about文件夹，about文件夹中会有一个index.md<br>（3）在index.md中进行个人介绍内容的编辑</p>
</li>
<li><p>设置统计分析<br>（1）这里设置的是百度统计<br>（2）参考链接：<a href="http://theme-next.iissnan.com/third-party-services.html#analytics-baidu" target="_blank" rel="external">http://theme-next.iissnan.com/third-party-services.html#analytics-baidu</a></p>
</li>
<li>设置社交账号展示<br>（1）参考链接：<a href="http://theme-next.iissnan.com/theme-settings.html#author-sites" target="_blank" rel="external">http://theme-next.iissnan.com/theme-settings.html#author-sites</a></li>
<li><p>设置页面文章的篇数<br>（1）安装相关插件<br><code>cnpm install --save hexo-generator-index
cnpm install --save hexo-generator-archive
cnpm install --save hexo-generator-tag</code><br>（2）在_config.yml配置文件中添加上如下的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">index_generator:</div><div class="line">	  per_page: 5</div><div class="line">archive_generator:</div><div class="line">	  per_page: 20</div><div class="line">	  yearly: true</div><div class="line">	  monthly: true</div><div class="line">tag_generator:</div><div class="line">	  per_page: 10</div></pre></td></tr></table></figure>
</li>
<li><p>添加RSS<br>（1）安装插件<br><code>cnpm install hexo-generator-feed --save</code><br>（2）在_config.yml修改配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">feed</div><div class="line">      type: atom</div><div class="line">      path: atom.xml</div><div class="line">      limit: 20</div></pre></td></tr></table></figure>
</li>
<li><p>添加sitemap<br>（1）安装插件<br><code>cnpm install hexo-generator-sitemap --save</code><br>（2）在_config.yml修改配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sitemap:</div><div class="line">      path: sitemap.xml</div></pre></td></tr></table></figure>
</li>
<li><p>标题栏展示字数统计以及阅读时长<br>（1）安装插件<br>（2）找到themes/next/layout/_marcro文件夹中的post.swig文件<br>（3）定位到<strong>post-time</strong>的元素，在元素后面追加如下的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;span class=&quot;post-time&quot;&gt;</div><div class="line">   &amp;nbsp; | &amp;nbsp;</div><div class="line"> &lt;span class=&quot;post-meta-item-icon&quot;&gt;</div><div class="line">   &lt;i class=&quot;fa fa-calendar-o&quot;&gt;&lt;/i&gt;</div><div class="line"> &lt;/span&gt;</div><div class="line"> &lt;span class=&quot;post-meta-item-text&quot;&gt;字数统计:&lt;/span&gt;</div><div class="line"> &lt;span class=&quot;post-count&quot;&gt;&#123;&#123; wordcount(post.content) &#125;&#125;(字)&lt;/span&gt;</div><div class="line"> </div><div class="line">&lt;/span&gt;</div><div class="line">  </div><div class="line">&lt;span class=&quot;post-time&quot;&gt;</div><div class="line">  &amp;nbsp; | &amp;nbsp;</div><div class="line">   &lt;span class=&quot;post-meta-item-icon&quot;&gt;</div><div class="line">     &lt;i class=&quot;fa fa-calendar-o&quot;&gt;&lt;/i&gt;</div><div class="line">   &lt;/span&gt;</div><div class="line">   &lt;span class=&quot;post-meta-item-text&quot;&gt;阅读时长:&lt;/span&gt;</div><div class="line">   &lt;span class=&quot;post-count&quot;&gt;&#123;&#123; min2read(post.content) &#125;&#125;(分)&lt;/span&gt;</div><div class="line">         </div><div class="line">&lt;/span&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>（4）参考链接：<a href="http://www.joryhe.com/2016-06-06-hexo_wordcount_setting_your_post.html" target="_blank" rel="external">http://www.joryhe.com/2016-06-06-hexo_wordcount_setting_your_post.html</a></p>
<ol>
<li>加载google字体缓慢的解决<br>（1）打开next/_config.xml文件，在font属性下修改host为//fonts.css.network<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">font:</div><div class="line">  enable: true</div><div class="line"></div><div class="line">  # Uri of fonts host. E.g. //fonts.googleapis.com (Default)</div><div class="line">  host: //fonts.css.network</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="部署到github，使之可以通过username-github-io来进行站点的访问"><a href="#部署到github，使之可以通过username-github-io来进行站点的访问" class="headerlink" title="部署到github，使之可以通过username.github.io来进行站点的访问"></a>部署到github，使之可以通过username.github.io来进行站点的访问</h3><p>（1）参考链接：<a href="http://blog.csdn.net/u3d_ysj/article/details/50525820" target="_blank" rel="external">http://blog.csdn.net/u3d_ysj/article/details/50525820</a></p>
<h3 id="部署到coding"><a href="#部署到coding" class="headerlink" title="部署到coding"></a>部署到coding</h3><p>（1）参考链接：<a href="http://www.jianshu.com/p/7ad9d3cd4d6e#" target="_blank" rel="external">http://www.jianshu.com/p/7ad9d3cd4d6e#</a></p>
<h3 id="域名申请以及域名解析"><a href="#域名申请以及域名解析" class="headerlink" title="域名申请以及域名解析"></a>域名申请以及域名解析</h3><p>（1）域名是在godaddy中购买，省去了备案的手续<br>（2）域名解析是在dnspod中配置的</p>
<h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><ol>
<li>如写一个test文章，输入如下的命令<br><code>hexo n &quot;test&quot;</code></li>
<li>在_post中就生成了一个test.md文件</li>
<li>指定分类，在categories中添加上分类，如<br><code>categories: 测试</code></li>
<li><p>指定标签，在tags中添加上标签，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tags:</div><div class="line">-test</div><div class="line">-测试</div></pre></td></tr></table></figure>
</li>
<li><p>编写一段简介，然后换行添加上一行 <!--more-->，这部分简介就会有列表页面展示</p>
</li>
<li>编写文章内容</li>
<li>重新生成页面，启动服务<br><code>hexo s -g</code></li>
<li>确定文章写好后，将其提交到github中<br><code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code>  </li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>Maupassant主题：<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="external">https://www.haomwei.com/technology/maupassant-hexo.html</a><br>Hexo搭建Github-Pages博客填坑教程：<a href="http://www.jianshu.com/p/35e197cb1273" target="_blank" rel="external">http://www.jianshu.com/p/35e197cb1273</a><br>Next主题：<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next</a><br>Next主题使用文档： <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a><br>关于Github的配置、域名申请、图床：<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo是一款优秀的静态博客，本文主要记录了在搭建Hexo博客时的一些安装配置。通过Hexo配置了自己的个人博客，采用了Next主题。&lt;br&gt;访问域名：&lt;a href=&quot;http://yaohuiye.com&quot;&gt;http://yaohuiye.com&lt;/a&gt;&lt;br&gt;github源码：&lt;a href=&quot;https://github.com/yaohuiye/yaohuiye.github.io&quot;&gt;https://github.com/yaohuiye/yaohuiye.github.io&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法入门</title>
    <link href="http://yoursite.com/2017/02/12/learn-markdown/"/>
    <id>http://yoursite.com/2017/02/12/learn-markdown/</id>
    <published>2017-02-12T03:27:07.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MarkDown简介"><a href="#MarkDown简介" class="headerlink" title="MarkDown简介"></a>MarkDown简介</h3><p><code>Markdown</code>是一种轻量级标记语言，创始人为<code>John Gruber</code>和<code>Aaron Swartz</code>。<br>它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的HTML文档”<br><a id="more"></a></p>
<h3 id="Markdown编辑器配置"><a href="#Markdown编辑器配置" class="headerlink" title="Markdown编辑器配置"></a>Markdown编辑器配置</h3><p>如果你使用Sublime编辑器，可以在该编辑器中添加上<code>MarkdownPreview</code>插件。<br>在编辑器中使用<code>Ctrl+Shift+P</code>，选择<code>Markdown Preview in browser</code>命令，在浏览器中查看Markdown的效果</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题分为1到6种级别，1为最大，6为最小。使用相应个数的<code>#</code>来生成。或者使用底线形式，利用<br><code>=</code>表示[最高级标题]和<code>-</code>表示[第二级标题]<br><strong>代码如下：</strong></p>
<pre><code>### 这是级别为3的标题 ###
###### 这是级别为6的标题 ######
这是最高级标题
=============
这是第二级标题
----------------------
</code></pre><p><strong>效果如下：</strong></p>
<h3 id="这是级别为3的标题"><a href="#这是级别为3的标题" class="headerlink" title="这是级别为3的标题"></a>这是级别为3的标题</h3><h6 id="这是级别为6的标题"><a href="#这是级别为6的标题" class="headerlink" title="这是级别为6的标题"></a>这是级别为6的标题</h6><h1 id="这是最高级标题"><a href="#这是最高级标题" class="headerlink" title="这是最高级标题"></a>这是最高级标题</h1><h2 id="这是第二级标题"><a href="#这是第二级标题" class="headerlink" title="这是第二级标题"></a>这是第二级标题</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>使用一个或多个<code>空行</code>分隔内容段来生成段落<br>在行末输入2个或以上’空格’再回车来生成换行</p>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>被1个<code>*</code>或<code>_</code>包围起来的文字，表示斜体<br>被2个<code>*</code>或<code>_</code>包围起来的文字，表示粗体<br>备注：如果在<code>*</code>或者<code>_</code>两边都有空白的话，那就是表示为普通符号<br><strong>代码如下：</strong></p>
<pre><code>*单个星号*
_单个下划线_
</code></pre><p><strong>效果如下：</strong><br><em>单个星号</em><br><em>单个下划线</em></p>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>在一行内使用3个以上的<code>-</code>或者<code>_</code>来表示，行内除此之外不能有其它内容</p>
<h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a><strong>代码如下：</strong></h2><pre><code>____
</code></pre><p><strong>效果如下：</strong></p>
<hr>
<hr>
<h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h3><p>使用<code>&gt;</code>作为段落前缀来标识引用文字段落。<br><strong>代码如下：</strong></p>
<pre><code>&gt;我引用了一段文字
&gt;我引用了另一段文字
</code></pre><p><strong>效果如下：</strong></p>
<blockquote>
<p>我引用了一段文字<br>我引用了另一段文字</p>
</blockquote>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>使用<code>*+-</code>表示无序列表<br>使用<code>数字</code>跟一个<code>英文句点</code>表示有序列表<br><strong>代码如下：</strong></p>
<pre><code>* 类型一
* 类型二
+ 类型三

1. 类型一
2. 类型二
3. 类型三
</code></pre><p><strong>效果如下：</strong></p>
<ul>
<li>类型一</li>
<li>类型二</li>
</ul>
<ul>
<li>类型三</li>
</ul>
<ol>
<li>类型一</li>
<li>类型二</li>
<li>类型三</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>使用<em>反引号</em>把文字括起来表示行内代码。<br>使用4个空格或一个Tab缩进，表示代码区块<br><strong>代码如下：</strong></p>
<pre><code>这是行内代码`Console.log(&apos;hello&apos;)`
Javascript:
var show = function(){
    console.log(&quot;hello,world&quot;);
}
</code></pre><p><strong>效果如下：</strong><br>这是行内代码<code>Console.log(&quot;hello&quot;)</code></p>
<pre><code>Javascript:
var show = function(){
    console.log(&quot;hello,world&quot;)
}
</code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>使用<code>[链接名称](链接地址)</code>表示行内式的链接<br><strong>代码如下：</strong></p>
<pre><code>[百度](http://www.baidu.com)
</code></pre><p><strong>效果如下：</strong><br><a href="http://www.baidu.com" target="_blank" rel="external">百度</a></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>使用<code>![提示文本](图片地址)</code>表示行内式的图片<br><strong>代码如下：</strong></p>
<pre><code>![百度翻译](http://fanyi.baidu.com/static/translation/img/header/logo_cbfea26.png)
</code></pre><p><strong>效果如下：</strong><br><img src="http://fanyi.baidu.com/static/translation/img/header/logo_cbfea26.png" alt="百度翻译"></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>代码如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">| 排序方法 | 平均情况 | 最好情况 | 最坏情况 | 辅助空间 | 稳定性 |</div><div class="line">|:-----|:-----|:-----|:-----|:-----|:-----|</div><div class="line">| 冒泡排序 | O(n²) | O(nlogn) | O(n²) | O(1) | 稳定 |</div><div class="line">| 简单选择 | O(n²) | O(n²) | O(n²) | O(1) | 稳定 |</div><div class="line">| 直接插入 | O(n²) | O(n) | O(n²) | O(1) | 稳定 |</div><div class="line">| 希尔排序 | O(nlogn)~O(n²) | O(n^1.3) | O(n²) | O(1) | 不稳定 |</div><div class="line">| 堆排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(1) | 不稳定 |</div><div class="line">| 归并排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(n) | 不稳定 |</div><div class="line">| 快速排序 | O(nlogn) | O(nlogn) | O(n²) | O(nlogn)~O(n) | 不稳定 |</div></pre></td></tr></table></figure></p>
<p><strong>效果如下：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">排序方法</th>
<th style="text-align:left">平均情况</th>
<th style="text-align:left">最好情况</th>
<th style="text-align:left">最坏情况</th>
<th style="text-align:left">辅助空间</th>
<th style="text-align:left">稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">冒泡排序</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(nlogn)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">稳定</td>
</tr>
<tr>
<td style="text-align:left">简单选择</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">稳定</td>
</tr>
<tr>
<td style="text-align:left">直接插入</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">稳定</td>
</tr>
<tr>
<td style="text-align:left">希尔排序</td>
<td style="text-align:left">O(nlogn)~O(n²)</td>
<td style="text-align:left">O(n^1.3)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">不稳定</td>
</tr>
<tr>
<td style="text-align:left">堆排序</td>
<td style="text-align:left">O(nlogn)</td>
<td style="text-align:left">O(nlogn)</td>
<td style="text-align:left">O(nlogn)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">不稳定</td>
</tr>
<tr>
<td style="text-align:left">归并排序</td>
<td style="text-align:left">O(nlogn)</td>
<td style="text-align:left">O(nlogn)</td>
<td style="text-align:left">O(nlogn)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">不稳定</td>
</tr>
<tr>
<td style="text-align:left">快速排序</td>
<td style="text-align:left">O(nlogn)</td>
<td style="text-align:left">O(nlogn)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(nlogn)~O(n)</td>
<td style="text-align:left">不稳定</td>
</tr>
</tbody>
</table>
<p><strong> 注：</strong></p>
<ul>
<li>第一行：第一行要显示的是表头，类似Thead</li>
<li>第二行：对齐方式。|:—–|是左对齐，|:—–:|是居中对齐，|—–:|是右对齐</li>
<li>表格中的内容如有|符号，则使用可以使用<code>&amp;#124;</code>来代替</li>
</ul>
<h3 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3><ul>
<li><a href="http://justcoding.iteye.com/blog/1954655" target="_blank" rel="external">Markdown快速入门</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown语法说明</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MarkDown简介&quot;&gt;&lt;a href=&quot;#MarkDown简介&quot; class=&quot;headerlink&quot; title=&quot;MarkDown简介&quot;&gt;&lt;/a&gt;MarkDown简介&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Markdown&lt;/code&gt;是一种轻量级标记语言，创始人为&lt;code&gt;John Gruber&lt;/code&gt;和&lt;code&gt;Aaron Swartz&lt;/code&gt;。&lt;br&gt;它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的HTML文档”&lt;br&gt;
    
    </summary>
    
      <category term="tool" scheme="http://yoursite.com/categories/tool/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello hexo</title>
    <link href="http://yoursite.com/2017/02/12/hello-world/"/>
    <id>http://yoursite.com/2017/02/12/hello-world/</id>
    <published>2017-02-12T03:27:07.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>前端限制可以采用jquery的ajaxPrefilter这个函数来进行阻止数据的重复请求</title>
    <link href="http://yoursite.com/2016/12/01/ajax-request-repeat/"/>
    <id>http://yoursite.com/2016/12/01/ajax-request-repeat/</id>
    <published>2016-12-01T15:15:40.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>jQuery.ajaxPrefilter()</strong>函数用于指定预先处理Ajax参数选项的回调函数。在所有参数选项被jQuery.ajax()函数处理之前，可以使用该函数设置的回调函数来预先更改任何参数选项。</p>
<p>步骤如下：<br>1、在发送请求前缓存请求的地址<br>2、下一次发送请求时，判断地址是否与缓存的地址一样，如果一样，则取消请求的发送<br>3、当请求完成后清除缓存的请求地址</p>
<a id="more"></a>
<p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//请求缓存对象</div><div class="line">var requests = &#123;&#125;</div><div class="line"></div><div class="line">$.ajaxPrefilter(function(options, originalOptions, jqXHR)&#123;</div><div class="line">	var key = options.url;</div><div class="line"></div><div class="line">	//缓存对象中不包含请求地址，则缓存请求的地址，否则视为重复提交，阻止请求</div><div class="line">	if(!request[key])&#123;</div><div class="line">		requests[key] = jqXHR;</div><div class="line"></div><div class="line">	&#125;else&#123;</div><div class="line"></div><div class="line">		jqXHR.abort();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">	var complete = options.complete;</div><div class="line"></div><div class="line">	options.complete = function(jqXHR, textStatus)&#123;</div><div class="line">		//请求完成后，清除缓存请求的地址</div><div class="line">		requests[key] = null;</div><div class="line">		</div><div class="line">		if($.isFunction(complete))&#123;</div><div class="line">			complete.apply(this, arguments);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>参考链接：<a href="http://www.365mini.com/page/jquery_ajaxprefilter.htm" target="_blank" rel="external">http://www.365mini.com/page/jquery_ajaxprefilter.htm</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;jQuery.ajaxPrefilter()&lt;/strong&gt;函数用于指定预先处理Ajax参数选项的回调函数。在所有参数选项被jQuery.ajax()函数处理之前，可以使用该函数设置的回调函数来预先更改任何参数选项。&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;br&gt;1、在发送请求前缓存请求的地址&lt;br&gt;2、下一次发送请求时，判断地址是否与缓存的地址一样，如果一样，则取消请求的发送&lt;br&gt;3、当请求完成后清除缓存的请求地址&lt;/p&gt;
    
    </summary>
    
      <category term="jquery" scheme="http://yoursite.com/categories/jquery/"/>
    
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记-获取年和月的方法</title>
    <link href="http://yoursite.com/2016/11/05/java-year-month/"/>
    <id>http://yoursite.com/2016/11/05/java-year-month/</id>
    <published>2016-11-05T09:23:47.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Calendar cal = Calendar.getInstance();</div><div class="line">int year = cal.get(Calendar.YEAR);//获取年份</div><div class="line">int month=cal.get(Calendar.MONTH);//获取月份</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="calendar" scheme="http://yoursite.com/tags/calendar/"/>
    
  </entry>
  
  <entry>
    <title>Integer类型变量与Long类型变量的比较</title>
    <link href="http://yoursite.com/2016/09/20/java-integer-long-compare/"/>
    <id>http://yoursite.com/2016/09/20/java-integer-long-compare/</id>
    <published>2016-09-20T09:54:01.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">publc static void main()&#123;</div><div class="line">	Integer I =1;</div><div class="line">	Long L = 1L;</div><div class="line">	System.out.println(I.equals(L))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>存储了两个相同数值的Long变量与Integer变量，通过equals方法比较时，返回的是false，即不相等。</p>
<a id="more"></a>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>equals方法是对象中的比较存储内容的比较方法，但是要求比较的双方都是同一类型才可以。<br>上面一个是Long类型，一个是Integer类型，所以即使它们存储的都是1的数值，但比较出来还是不相等。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>将两个数值，转换为基本类型long和int然后用双等于号来进行比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">publc static void main()&#123;</div><div class="line">	Integer I =1;</div><div class="line">	Long L = 1L;</div><div class="line">	System.out.println(I.intValue() == L.longValue())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;publc static void main()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Integer I =1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Long L = 1L;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	System.out.println(I.equals(L))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;存储了两个相同数值的Long变量与Integer变量，通过equals方法比较时，返回的是false，即不相等。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Integer" scheme="http://yoursite.com/tags/Integer/"/>
    
      <category term="Long" scheme="http://yoursite.com/tags/Long/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat如何判断session过期</title>
    <link href="http://yoursite.com/2016/09/16/tomcat-session-expired/"/>
    <id>http://yoursite.com/2016/09/16/tomcat-session-expired/</id>
    <published>2016-09-16T13:27:44.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Tomcat的session失效时间是怎么计算，怎么去判断session过期</p>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>1、当tomcat启动后，会开启一个后台线程，去查询所有的session对象<br>2、检查不活动的session的时间是否超过了设定值，如果超过了则将其删除。</p>
<ul>
<li>判断是否超过设定值的源代码如下：<br><img src="http://7te80x.com1.z0.glb.clouddn.com/tomcat-session.png" alt="tomcat-session.png"></li>
<li>判断条件： <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int timeIdle =(int) ((timeNow - session.getLastUsedTime()) / 1000L);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>从此判断条件可以看出，失效时间就是当前时间减去session的最近使用的时间</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;Tomcat的session失效时间是怎么计算，怎么去判断session过期&lt;/p&gt;
&lt;h3 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分
    
    </summary>
    
      <category term="tomcat" scheme="http://yoursite.com/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="http://yoursite.com/tags/tomcat/"/>
    
      <category term="session expired" scheme="http://yoursite.com/tags/session-expired/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate对于复合主键的映射的注解方式</title>
    <link href="http://yoursite.com/2016/09/07/hibernate-multi-key/"/>
    <id>http://yoursite.com/2016/09/07/hibernate-multi-key/</id>
    <published>2016-09-07T09:54:17.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>复合主键，采用的Hibernate注解@EmbeddedId进行声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class UserArticleId&#123;</div><div class="line">	private Integer userId;</div><div class="line">	private Integer articleId;</div><div class="line"></div><div class="line">	//getter and setter ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class UserArticle&#123;</div><div class="line">	private UserArticleId id;</div><div class="line"></div><div class="line">	@EmbeddedId</div><div class="line">	@AttributeOverrides(&#123;</div><div class="line">		@AttributeOverride(name=&quot;userId&quot;,column=@Column(name=&quot;userId&quot;))</div><div class="line">		@AttributeOverride(name=&quot;articleId&quot;,column=@Column(name=&quot;articleId&quot;))</div><div class="line">		&#125;)</div><div class="line">	public UserArticleId getId()&#123;</div><div class="line">		return this.id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(UserArticleId id)&#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复合主键，采用的Hibernate注解@EmbeddedId进行声明&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cl
    
    </summary>
    
      <category term="hibernate" scheme="http://yoursite.com/categories/hibernate/"/>
    
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>了解数据库的读写分离</title>
    <link href="http://yoursite.com/2016/08/10/project-db-read-write/"/>
    <id>http://yoursite.com/2016/08/10/project-db-read-write/</id>
    <published>2016-08-10T09:54:35.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么进行读写分离"><a href="#为什么进行读写分离" class="headerlink" title="为什么进行读写分离"></a>为什么进行读写分离</h3><p>1、如果没有读写分离，则如果频繁写，就会导致表被锁住，读的性能就会受到影响<br>2、将读与写分离，改善在业务锁方面的争用情况提高性能；提高数据库机器的抗压能力；数据备份，进行容灾</p>
<a id="more"></a>
<h3 id="怎么进行读写分离"><a href="#怎么进行读写分离" class="headerlink" title="怎么进行读写分离"></a>怎么进行读写分离</h3><p>1、物理数据库的读写分离：一个读数据库服务器，一个写数据库服务器<br>2、程序的读写分离<br>（1）两个数据源：一个用于读，一个用于写<br>（2）通过Spring的AOP切面技术，在每个数据访问方法请求前，通过约定的前缀判断该请求是读还是写，如get、count是读数据，而update、add、del是写数据，如果是读请求则调用读数据源，如果是写请求则调用写数据源</p>
<h3 id="读写分离存在的问题"><a href="#读写分离存在的问题" class="headerlink" title="读写分离存在的问题"></a>读写分离存在的问题</h3><p>1、主从同步不及时，导致用户查看到最新的数据会出现延时<br>2、有一些业务操作既要进行读又要进行写的操作，那要调用读数据源还是写数据源（应细化业务操作的粒度，单一职责，一个大的业务由多个小的业务组成）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么进行读写分离&quot;&gt;&lt;a href=&quot;#为什么进行读写分离&quot; class=&quot;headerlink&quot; title=&quot;为什么进行读写分离&quot;&gt;&lt;/a&gt;为什么进行读写分离&lt;/h3&gt;&lt;p&gt;1、如果没有读写分离，则如果频繁写，就会导致表被锁住，读的性能就会受到影响&lt;br&gt;2、将读与写分离，改善在业务锁方面的争用情况提高性能；提高数据库机器的抗压能力；数据备份，进行容灾&lt;/p&gt;
    
    </summary>
    
      <category term="project" scheme="http://yoursite.com/categories/project/"/>
    
    
      <category term="datasource" scheme="http://yoursite.com/tags/datasource/"/>
    
  </entry>
  
  <entry>
    <title>指定Bean对象中转化为JSON数据的属性的方法</title>
    <link href="http://yoursite.com/2016/08/09/gson-field/"/>
    <id>http://yoursite.com/2016/08/09/gson-field/</id>
    <published>2016-08-09T09:54:51.000Z</published>
    <updated>2017-04-12T14:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在Bean对象中有一些属性是不需要转化为JSON数据的，因此需要能够指定转化为JSON数据的属性。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>使用Gson，可以通过如下的方法来进行配置<br>1、在要输出的属性上添加上@Expose注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class Article&#123;</div><div class="line">	private Integer id;</div><div class="line">	@Expose</div><div class="line">	@SerializedName(&quot;title&quot;)</div><div class="line">	private String ArticleTitle;</div><div class="line"></div><div class="line">	//getter and setter ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、Gson采用new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()进行创建对象，创建此对象，然后调用生成json数据的方法：gson.toJson(object)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static void main()&#123;</div><div class="line">	Article article = new Article();</div><div class="line">	article.setId(1);</div><div class="line">	article.setArticleTitle(&apos;test title&apos;);</div><div class="line"></div><div class="line">	Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()</div><div class="line">	System.out.println(gson.toJson(article));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;在Bean对象中有一些属性是不需要转化为JSON数据的，因此需要能够指定转化为JSON数据的属性。&lt;/p&gt;
&lt;h3 id=&quot;解决方法&quot;&gt;&lt;a
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="gson" scheme="http://yoursite.com/tags/gson/"/>
    
  </entry>
  
</feed>
